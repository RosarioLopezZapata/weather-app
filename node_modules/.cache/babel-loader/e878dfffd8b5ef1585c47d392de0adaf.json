{"ast":null,"code":"var _jsxFileName = \"/home/rosario/weather/src/containers/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Card from '../components/Card';\nimport Cards from '../components/Cards.jsx';\nimport Nav from '../components/Nav';\nimport SearchBar from '../components/SearchBar.jsx'; //import { Route } from 'react-router-dom ';\n\nimport About from '../components/About';\nimport { Route } from 'react-router-dom';\nimport Ciudad from '../components/Ciudad'; //import data from './data.js';\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n  _s();\n\n  const [cities, setCities] = useState([]);\n\n  function handleAddCity(city) {\n    setCities(prevCities => {\n      return [city, ...prevCities];\n    });\n  }\n\n  ;\n\n  function handleRemoveCity(cityId) {\n    setCities(prevCities => {\n      return prevCities.filter(city => {\n        return cityId !== city.id;\n      });\n    });\n  }\n\n  ;\n\n  function onSearch(ciudad) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`).then(r => r.json()).then(recurso => {\n      if (recurso.main !== undefined) {\n        const ciudad = {\n          min: Math.round(recurso.main.temp_min),\n          max: Math.round(recurso.main.temp_max),\n          img: recurso.weather[0].icon,\n          id: recurso.id,\n          wind: recurso.wind.speed,\n          temp: recurso.main.temp,\n          name: recurso.name,\n          weather: recurso.weather[0].main,\n          clouds: recurso.clouds.all,\n          latitud: recurso.coord.lat,\n          longitud: recurso.coord.lon\n        };\n        handleAddCity(ciudad);\n        console.log(ciudad);\n      } else {\n        alert(\"Ciudad no encontrada\");\n      }\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      render: () => /*#__PURE__*/_jsxDEV(Nav, {\n        onSearch: onSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 23\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/about\",\n      component: About\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/\",\n      children: /*#__PURE__*/_jsxDEV(Cards, {\n        cities: cities,\n        onRemove: handleRemoveCity\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      exact: true,\n      path: \"/ciudad/:id\",\n      render: ({\n        match\n      }) => {\n        const city = cities.find(city => city.id === parseInt(match.params.id));\n        return /*#__PURE__*/_jsxDEV(Ciudad, {\n          ciudad: city\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 18\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"f1nPJs+hrTaAy6BEqAnKgJLvJt4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/rosario/weather/src/containers/App.js"],"names":["React","useState","Card","Cards","Nav","SearchBar","About","Route","Ciudad","apiKey","App","cities","setCities","handleAddCity","city","prevCities","handleRemoveCity","cityId","filter","id","onSearch","ciudad","fetch","then","r","json","recurso","main","undefined","min","Math","round","temp_min","max","temp_max","img","weather","icon","wind","speed","temp","name","clouds","all","latitud","coord","lat","longitud","lon","console","log","alert","match","find","parseInt","params"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport Card from '../components/Card';\nimport Cards from '../components/Cards.jsx';\nimport Nav from '../components/Nav';\nimport SearchBar from '../components/SearchBar.jsx';\n//import { Route } from 'react-router-dom ';\nimport About from '../components/About';\nimport { Route } from 'react-router-dom';\nimport Ciudad from '../components/Ciudad';\n//import data from './data.js';\n\nconst apiKey = '4ae2636d8dfbdc3044bede63951a019b';\n\nfunction App() {\n\n  const [cities, setCities] = useState([]);\n  function handleAddCity (city){\n    setCities((prevCities)=>{\n      return[city, ...prevCities];\n    });\n  };\n  function handleRemoveCity (cityId){\n    setCities((prevCities)=>{\n      return prevCities.filter((city)=>{\n        return cityId !== city.id;\n      })\n    })\n\n  };\n   \n  function onSearch(ciudad) {\n    fetch(`http://api.openweathermap.org/data/2.5/weather?q=${ciudad}&appid=${apiKey}&units=metric`)\n      .then(r => r.json())\n      .then((recurso) => {\n        if(recurso.main !== undefined){\n          const ciudad = {\n            min: Math.round(recurso.main.temp_min),\n            max: Math.round(recurso.main.temp_max),\n            img: recurso.weather[0].icon,\n            id: recurso.id,\n            wind: recurso.wind.speed,\n            temp: recurso.main.temp,\n            name: recurso.name,\n            weather: recurso.weather[0].main,\n            clouds: recurso.clouds.all,\n            latitud: recurso.coord.lat,\n            longitud: recurso.coord.lon\n          }\n          handleAddCity(ciudad)\n          console.log(ciudad)\n        } else {\n          alert(\"Ciudad no encontrada\")\n        }\n      });\n\n    }\n\n  return (\n    <div className=\"App\">\n      <Route\n        path='/'\n        render={() => <Nav onSearch={onSearch} />}\n      />\n      <Route\n          exact path='/about'\n          component={About}\n      />\n      <Route exact path='/'>\n        <Cards\n              cities={cities}\n              onRemove={handleRemoveCity}\n            />\n      </Route>\n        \n      \n      <Route \n        exact path='/ciudad/:id' \n        render ={({match})=>{\n          const city= cities.find(\n            (city) => city.id === parseInt(match.params.id)\n          );\n          return <Ciudad ciudad= {city}/>;\n        }\n        }\n      /> \n    \n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}